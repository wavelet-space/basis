basis.protocols
===============

.. py:module:: basis.protocols

.. autoapi-nested-parse::

   Modul obsahuje protokoly, rozhraní pomocné funkce používané napříč knihovnou.



Classes
-------

.. autoapisummary::

   basis.protocols.Singleton
   basis.protocols.Versionable
   basis.protocols.Configurable


Functions
---------

.. autoapisummary::

   basis.protocols.is_singleton


Module Contents
---------------

.. py:function:: is_singleton(this: object) -> bool

.. py:class:: Singleton

   Marker interface to subclass.


.. py:class:: Versionable

   Bases: :py:obj:`Protocol`


   Represents an object with defined version.

   Version e.g. ``str``, ``int``, or ``tuple[int, int, int]``.


   .. py:property:: version
      :type: Version



.. py:class:: Configurable

   Bases: :py:obj:`Protocol`


   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing).

   For example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto[T](Protocol):
           def meth(self) -> T:
               ...


   .. py:property:: configuration


